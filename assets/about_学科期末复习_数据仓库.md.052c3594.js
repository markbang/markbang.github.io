import{_ as t,o as e,c as a,Q as o}from"./chunks/framework.d084db19.js";const E=JSON.parse('{"title":"一、从数据库到数据仓库","description":"","frontmatter":{},"headers":[],"relativePath":"about/学科期末复习/数据仓库.md","filePath":"about/学科期末复习/数据仓库.md","lastUpdated":1704186248000}'),l={name:"about/学科期末复习/数据仓库.md"},s=o(`<details><summary>写在前面</summary> 数据仓库按照老师上课的顺序来，这个顺序也是比较合理的 PS：每章的引言部分对理解章节很重要 <p><img src="https://cdn.bangwu.top/img/202312231941201.webp" alt="explorer_OWvhwW5LOW"></p></details><h1 id="一、从数据库到数据仓库" tabindex="-1">一、从数据库到数据仓库 <a class="header-anchor" href="#一、从数据库到数据仓库" aria-label="Permalink to &quot;一、从数据库到数据仓库&quot;">​</a></h1><details><summary>引言👈</summary><p> 图灵奖获得者吉姆.格雷提出了一个经验定律，即 网络环境下每18个月产生的数据量等于有史以来 的数据量之和，仅仅依靠数据库管理系统的查询 检索机制和统计分析方法，已经远远不能满足实 际需求。 </p><p> 如何有效地管理和利用数据库中的海量数据，以 及如何发现其中潜在的知识，更好的发挥这些数 据的潜能，数据仓库和数据挖掘技术应运而生。 </p></details><h2 id="_1-1数据仓库-data-warehouse-产生的原因" tabindex="-1">1.1数据仓库(Data Warehouse)产生的原因 <a class="header-anchor" href="#_1-1数据仓库-data-warehouse-产生的原因" aria-label="Permalink to &quot;1.1数据仓库(Data Warehouse)产生的原因&quot;">​</a></h2><p>数据处理大致可以分为两类：</p><ul><li>操作型处理【也称<code>联机事务处理</code>（Online Transaction Process，<strong>OLTP</strong>），是数据库系统的主要应用。例如索引、日志、备份等技术】</li><li>分析型处理【对数据进行<code>统计分析</code>，得出有用的信息作为决策的依据和基础。就是有目的的进行查询等操作】</li></ul><p>数据库系统的局限性：</p><ol><li><code>数据分散</code>【只处理本部门业务的数据，不是集成的】</li><li><code>“蜘蛛网”</code>问题【对数据进行抽取式的集成，是数据访问相当复杂】</li><li><code>数据不一致</code>【蜘蛛网问题导致了多个应用间的数据不一致。可以理解为每个抽取步骤的时间、内容不同】</li><li><code>数据动态集成问题</code>【每次分析都需要集成，效率低】</li><li>历史数据问题</li><li>数据综合问题 （5、6两点不重要，且这部分比较繁琐）</li></ol><p><strong>数据仓库的本质：</strong></p><p>单就其是数据的存储容器这一点而言，数据仓库与数据库并没有本质的区别。而且在更多的时候，是将数据仓库作为一个数据库应用系统来看待的。数据仓库是为了构建新的分析型处理环境而出现的一种数据存储和组织技术。👇</p><p><img src="https://cdn.bangwu.top/img/202312241504448.webp" alt="chrome_YpczEZjyRA"></p><h2 id="_1-2数据仓库的基本概念" tabindex="-1">1.2数据仓库的基本概念 <a class="header-anchor" href="#_1-2数据仓库的基本概念" aria-label="Permalink to &quot;1.2数据仓库的基本概念&quot;">​</a></h2><p>定义：数据仓库是<code>面向主题的</code>、<code>集成的</code>、<code>不可更新的</code>、<code>随时间不断变化的</code>数据集合。<strong>【必考】</strong></p><p>主题与<code>面向主题</code>：</p><ul><li>主题是抽象概念，是在较高层次上将企业信息系统中的数据综合、归类并进行分析利用的抽象。</li><li>面向主题是相对于传统数据库的面向应用而言的。【面向主题就是围绕来进行的，例如建立“商品销售”主题，要抽取相关数据】</li></ul><p>【例如，商品的推荐系统就是基于数据仓库设计的，商品的信息就是数据仓库所面向的主题。】</p><p>剩下的三个特征中，<code>集成的</code>是字面意思，从不同数据源来抽取、清洗</p><p><code>不可更新的</code>：相对说法，是指不对原始的数据进行操作【操作仅限于初始导入和记录查询，不进行删除和修改】</p><p><code>随时间不断变化的</code>：数据会不断从来源处更新，重新综合。</p><p>PS: 数据库 + <strong>有目的的SELECT</strong> = 数据仓库</p><h2 id="_1-3数据仓库的体系结构" tabindex="-1">1.3数据仓库的体系结构 <a class="header-anchor" href="#_1-3数据仓库的体系结构" aria-label="Permalink to &quot;1.3数据仓库的体系结构&quot;">​</a></h2><p>数据仓库的结构包含了4部分，分别是<code>数据源</code>、<code>数据存储及管理</code>、<code>服务器</code>和<code>前端工具</code>。</p><p><img src="https://cdn.bangwu.top/img/202312241540515.webp" alt="chrome_2PzvDt7FUX"></p><blockquote><p>ETL和ELT：从上图可以看出两者的区别和适用情况。【一个是先T(转换)，一个是后T】</p></blockquote><p>元数据：是数据仓库中所有描述性信息，分为商业元数据和技术元数据。</p><p>数据仓库和数据集市的比较：【数据集市数据粒度大】</p><table><thead><tr><th>对比项</th><th>数据仓库</th><th>数据集市</th></tr></thead><tbody><tr><td>范围</td><td>企业级</td><td>部门级</td></tr><tr><td>主题</td><td><code>企业主题</code></td><td><code>部门或特殊的分析主题</code></td></tr><tr><td>数据粒度</td><td>最小的粒度</td><td>较大的粒度</td></tr><tr><td>数据结构</td><td>规范化结构</td><td>星型模式、雪花型模式、或两者结合</td></tr><tr><td>历史数据</td><td>大量的历史数据</td><td>适度的历史数据</td></tr><tr><td>优化</td><td>处理海量数据、数据检索</td><td>便于访问和分析、快速分析</td></tr></tbody></table><h1 id="二、操作数据存储" tabindex="-1">二、操作数据存储 <a class="header-anchor" href="#二、操作数据存储" aria-label="Permalink to &quot;二、操作数据存储&quot;">​</a></h1><details><summary>引言👈</summary><p> DB~DW结构解决了企业操作型数据和分析型数据 的处理问题。然而，这种两层结构并不能有效的处 理企业中所有的数据处理要求，为了解决多层次的 数据处理需求，在DB~DW两层体系中增加一个新 的层次ODS，形成DB~ODS~DW的三层体系结构。 </p><p> ODS作为中间层，适合于辅助企业完成日常决策 的数据分析处理。 </p></details><h2 id="_2-1ods" tabindex="-1">2.1ODS <a class="header-anchor" href="#_2-1ods" aria-label="Permalink to &quot;2.1ODS&quot;">​</a></h2><p>操作性数据(Operational Data Store)，简称ODS：面向主题的（Subject Oriented）、集成的（Integrated）、细节的（Detailed）、可更新的 （Volatile）、当前的（Current valued）或接近当前的数据集合， 用于支持全局业务处理和日常管理控制操作。【是一种数据环境，适应某种层次的应用需求；仍属于操作型环境 （Operational Environment）】</p><h2 id="_2-2db-ods-dw体系" tabindex="-1">2.2DB~ODS~DW体系 <a class="header-anchor" href="#_2-2db-ods-dw体系" aria-label="Permalink to &quot;2.2DB~ODS~DW体系&quot;">​</a></h2><p><img src="https://cdn.bangwu.top/img/chrome_VbGNl0slqU.webp" alt="chrome_VbGNl0slqU"></p><p>【ODS是动态数据，实时更新的，但ODS中只存放当前和接近当前的细节数据，数据量较少】可以理解为DB经过实时转换后生成ODS，ODS再写入DW，充当“承上启下”的角色。</p><blockquote><p>ODS可以分为：同步ODS、即时ODS、延时ODS。【字面意思】</p></blockquote><h1 id="三、数据仓库中的数据" tabindex="-1">三、数据仓库中的数据 <a class="header-anchor" href="#三、数据仓库中的数据" aria-label="Permalink to &quot;三、数据仓库中的数据&quot;">​</a></h1><details><summary>引言👈</summary><p> 数据仓库中的数据都是按照一定的方式存储的，例如考虑到粒度的问题，以及数据组织、追加，元数据的作用等都是数据仓库里面数据的基本概念。数据仓库的组织形式直接影响到数据的有效性和可靠性。 </p></details><h2 id="_3-1数据仓库中的数据组织" tabindex="-1">3.1数据仓库中的数据组织 <a class="header-anchor" href="#_3-1数据仓库中的数据组织" aria-label="Permalink to &quot;3.1数据仓库中的数据组织&quot;">​</a></h2><blockquote><p>数据仓库中存储着两类数据，业务数据和元数据。</p></blockquote><p><strong>数据粒度</strong>：粒度是指数据仓库的数据单位中保存数据的细化或综合程度的级别。【在数据仓库中的数据粒度与查询的详细程度之间要做 出权衡。 】</p><p><strong>数据分割</strong>：数据分割是指将数据<code>分割到各自的物理单元</code>以便能够独立处理，提高数据处理效率。【垂直分割和水平分割】</p><p>数据分割后的数据单元称为分片，分片数据没有交叉。【数据分割有点确实很多，但是可能导致数据分配的不平衡】</p><p>数据分割时需要注意：分割均匀、用户的查询需求、数据的汇总方式。</p><blockquote><p>数据粒度和数据分割设计得好，几乎所有的数据仓库设计和实现的问题都将迎刃而解。</p></blockquote><h2 id="_3-2数据仓库中数据的追加" tabindex="-1">3.2数据仓库中数据的追加 <a class="header-anchor" href="#_3-2数据仓库中数据的追加" aria-label="Permalink to &quot;3.2数据仓库中数据的追加&quot;">​</a></h2><blockquote><p>当数据仓库的数据初装完成以后，再向数据仓库输入（导入）数据的过程称为<code>数据追加</code>。</p></blockquote><blockquote><p>如何能够确切地感知究竟哪些数据是上一次追加过程以后新生成的，这项工作称为<code>变化数据的捕捉</code>。</p></blockquote><p><strong>数据追加过程中实现变化数据的捕捉的方法</strong>：</p><ol><li>时标【加上更新数据时的时间】</li><li>DELTA文件【A + DELTA A = A‘ DELTA是用来记录所改变的数据内容】</li><li>前后快照文件【字面意思。 <code>快照</code>：<strong>数据存储的某一时刻的状态记录</strong>】</li><li>日志文件</li></ol><h2 id="_3-3数据仓库中的元数据" tabindex="-1">3.3数据仓库中的元数据 <a class="header-anchor" href="#_3-3数据仓库中的元数据" aria-label="Permalink to &quot;3.3数据仓库中的元数据&quot;">​</a></h2><blockquote><p><code>元数据</code>：是关于数据的数据。【元数据描述了数据的结构、来源、抽取和转换规则、存储，描述操纵数据的进程和应用程序的结构、功能等。】</p></blockquote><p>元数据的<strong>作用</strong>：提供数据资源的全面指南。【在数据仓库中，元数据定义了数据仓库中的许多对象——表、列、查询、商业规则或是数据仓库内部的数据转移。】</p><blockquote><p>元数据是数据仓库的重要构件，是数据仓库的指示图（roadmap）。</p></blockquote><p><em>ODS元数据和DW元数据均属于数据仓库元数据，是数据仓库系统的核心元数据。</em></p><p><img src="https://cdn.bangwu.top/img/202312241732328.webp" alt="wpspdf_xLLu4UM8MS"></p><p>PS：本章节中含有<code>元数据分类</code>部分的知识没有进行说明，认为繁琐且用处不大，不是重点部分。</p><h1 id="四、olap的概述及模型" tabindex="-1">四、OLAP的概述及模型 <a class="header-anchor" href="#四、olap的概述及模型" aria-label="Permalink to &quot;四、OLAP的概述及模型&quot;">​</a></h1><details><summary>引言👈</summary><p> 关系数据库满足了联机事务处理(OLTP)的要求，但分析型应用无法适应， 数据分析技术是在一定的数据基础之上进行分析的方式和方法，通常包括联机分析处理和数据挖掘等内容。 </p><p> 数据分析执术不一定非要建立在数据仓库基础上，但有了数据仓库之后，数据分析的能力和效率将大大提高。 </p></details><h2 id="_4-1olap技术概述" tabindex="-1">4.1OLAP技术概述 <a class="header-anchor" href="#_4-1olap技术概述" aria-label="Permalink to &quot;4.1OLAP技术概述&quot;">​</a></h2><blockquote><p>联机分析处理（OLAP）是一种软件技术，可用于从不同的角度分析业务数据。【组织收集和存储来自多个数据源的数据，例如网站、应用程序、智能电表和内部系统。OLAP 将这些数据合并分为几类，为战略规划提供切实可行的见解。】</p></blockquote><p>OLAP特点：快速、可分析、多维、及时。</p><blockquote><p><strong>OLAP与OLTP的区别</strong></p></blockquote><p>联机分析处理 (OLAP) 系统的主要用途是分析聚合数据，而联机事务处理 (OLTP) 系统的主要用途是处理数据库事务。</p><p>【您使用 OLAP 系统来生成报告、执行复杂的数据分析和确定趋势。相比之下，您使用 OLTP 系统来处理订单、更新库存和管理客户账户。👇】</p><table><thead><tr><th>特征</th><th>OLAP（Online Analytical Processing）</th><th>OLTP（Online Transaction Processing）</th></tr></thead><tbody><tr><td>目标</td><td>决策和分析</td><td>日常交易处理</td></tr><tr><td>数据操作方式</td><td>复杂查询和分析</td><td>快速事务性数据处理</td></tr><tr><td>数据模型</td><td>多维数据模型</td><td>规范化的数据模型</td></tr><tr><td>性能要求</td><td>高查询性能，相对低实时性</td><td>高事务处理速度，相对高实时性</td></tr><tr><td>数据量</td><td>大量历史数据</td><td>大量短期交易数据</td></tr></tbody></table><h2 id="_4-2多维数据模型" tabindex="-1">4.2多维数据模型 <a class="header-anchor" href="#_4-2多维数据模型" aria-label="Permalink to &quot;4.2多维数据模型&quot;">​</a></h2><p>多维数据模型的<strong>基本概念</strong>：</p><ul><li>多维数据模型又称多维概念视图，是一个多维空间，通常用<code>Cube</code>来表示</li><li>多维数据模型用多维数组来表示，可以更加直观地表现现实中的复杂关系</li><li>多维数据模型基本组成：维、维成员、维层、度量（变量、指标）</li></ul><p>【维成员：维的一个取值。】</p><blockquote><p><strong>星型模型、雪花型结构</strong>【这两个不做太多解释，可以看<a href="https://zhuanlan.zhihu.com/p/139656253" target="_blank" rel="noreferrer">这篇文章</a>】</p></blockquote><blockquote><p><strong>常用的多维分析操作</strong></p></blockquote><ol><li><em>聚集</em>：多维分析的基础。【对数据进行综合，SUM，RANK，AVG，COUNT等】</li><li>切片、切块、旋转、下钻、上卷【都是对Cube操作】</li><li>维操作、属性操作</li></ol><p>多维查询语言MDX（Mutiply Dimension Expression）：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span></span>
<span class="line"><span style="color:#E1E4E8;"> {[Region].[City].&amp;[上海],[Region].[City].&amp;[北京]}</span></span>
<span class="line"><span style="color:#F97583;">ON</span><span style="color:#E1E4E8;"> Colums,</span></span>
<span class="line"><span style="color:#E1E4E8;">	[Time].[Month].[1] </span><span style="color:#F97583;">ON</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Rows</span></span>
<span class="line"><span style="color:#F97583;">From</span><span style="color:#E1E4E8;"> [Mkas]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span></span>
<span class="line"><span style="color:#24292E;"> {[Region].[City].&amp;[上海],[Region].[City].&amp;[北京]}</span></span>
<span class="line"><span style="color:#D73A49;">ON</span><span style="color:#24292E;"> Colums,</span></span>
<span class="line"><span style="color:#24292E;">	[Time].[Month].[1] </span><span style="color:#D73A49;">ON</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Rows</span></span>
<span class="line"><span style="color:#D73A49;">From</span><span style="color:#24292E;"> [Mkas]</span></span></code></pre></div><h1 id="五、数据立方的存储、预计算和缩减" tabindex="-1">五、数据立方的存储、预计算和缩减 <a class="header-anchor" href="#五、数据立方的存储、预计算和缩减" aria-label="Permalink to &quot;五、数据立方的存储、预计算和缩减&quot;">​</a></h1><p>这章好像是概念章节，没有特意强调，接下来的实操也没有涉及到相关的知识，而且PDF中欠缺本部分内容。暂定不考。</p><p>不放心的可以去看<a href="https://alist.bangwu.top/%E9%98%BF%E9%87%8C%E4%BA%91-%E6%A3%92%E6%97%A0/%E8%AF%BE%E4%BB%B6/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/%E7%AC%AC%E4%BA%8C%E7%AF%87%E8%81%94%E6%9C%BA%E5%88%86%E6%9E%90%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.pdf" target="_blank" rel="noreferrer">课件</a></p><h1 id="六、数据仓库的设计" tabindex="-1">六、数据仓库的设计 <a class="header-anchor" href="#六、数据仓库的设计" aria-label="Permalink to &quot;六、数据仓库的设计&quot;">​</a></h1><details><summary>引言👈</summary><p> 数据仓库是一个环境，而不是一件产品 </p><p> 数据仓库技术是为了有效地吧操作数据集成到统一的环境中以提供决策型数据访问的各种技术和模块的总称。 </p><p> 相对而言，数据仓库更加是一种思想，其基本粒子就是对数据库或者类似环境的“快照”，一个快照就是对一个时间点的截面，这样使得是数据仓库具有天然的历史属性，方便进行数据的挖掘处理。 </p></details><blockquote><p>数据仓库建设的目标</p></blockquote><ul><li>数据仓库必须使组织机构的信息变得容易存取</li><li>数据仓库必须一致地展示组织机构的信息</li><li>数据仓库必须具有广泛的适应性和便于修该</li></ul><blockquote><p>数据仓库设计方法概述</p></blockquote><ol><li>DW设计与DB设计方法比较 <ol><li>DB <ul><li>SDLC（System Development Life Cycle） <strong>应用需求驱动</strong></li></ul></li><li>DW <ul><li>CLDS <strong>数据驱动+需求驱动</strong></li></ul></li></ol></li></ol><p><img src="https://cdn.bangwu.top/img/202312242330031.webp" alt="wpspdf_6NRGwQAGCk"></p><ol start="2"><li>明确需求</li><li>设计的原则【坚持“以数据驱动为中心，数据驱动和需求驱动相结合”的原则】</li><li>实际工程中的设计方法【确定范围与项目定义、应用系统及其数据的调研与分析、建设方法】</li><li>数据驱动系统设计方法的基本思路</li><li>DW设计的三级数据模型【概念模型(ER图)=&gt;逻辑模型=&gt;物理模型】</li></ol><p><img src="https://cdn.bangwu.top/img/202312251307477.webp" alt="wpspdf_5u8NSPRgp0"></p><blockquote><p>剩下的基本就是实操方向的知识了，涉及的有<a href="https://alist.bangwu.top/%E8%93%9D%E5%A5%8F%E4%BA%91-%E6%A3%92%E6%97%A0/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0.pdf" target="_blank" rel="noreferrer"><code>窗口函数</code></a>、<a href="https://alist.bangwu.top/%E9%98%BF%E9%87%8C%E4%BA%91-%E6%A3%92%E6%97%A0/%E4%B8%B4%E6%97%B6%E5%A4%87%E4%BB%BD/%E5%AE%9E%E9%AA%8C3-RFM%E5%88%86%E6%9E%90.pdf" target="_blank" rel="noreferrer"><code>RFM</code></a>、<a href="https://alist.bangwu.top/%E9%98%BF%E9%87%8C%E4%BA%91-%E6%A3%92%E6%97%A0/%E4%B8%B4%E6%97%B6%E5%A4%87%E4%BB%BD/SQL%20Server%20BI%EF%BC%881%EF%BC%89-SSIS%E6%93%8D%E4%BD%9C.pdf" target="_blank" rel="noreferrer"><code>SSIS</code></a>、<a href="https://alist.bangwu.top/%E9%98%BF%E9%87%8C%E4%BA%91-%E6%A3%92%E6%97%A0/%E4%B8%B4%E6%97%B6%E5%A4%87%E4%BB%BD/SQL%20Server%20BI%EF%BC%882%EF%BC%89-SSAS%E6%93%8D%E4%BD%9C.pdf" target="_blank" rel="noreferrer"><code>SSAS</code></a>、<a href="https://alist.bangwu.top/%E9%98%BF%E9%87%8C%E4%BA%91-%E6%A3%92%E6%97%A0/%E4%B8%B4%E6%97%B6%E5%A4%87%E4%BB%BD/SQL%20Server%20BI%EF%BC%883%EF%BC%89-MDX.pdf" target="_blank" rel="noreferrer"><code>MDX</code></a>。这几个部分由于涉及到实操方面且是重点，就去看课件吧。最后提供一个<a href="https://alist.bangwu.top/%E6%9C%AC%E6%9C%BA/SQL%E6%96%87%E6%A1%A3.sql" target="_blank" rel="noreferrer">SQL代码</a>，用来检测语法知识。(上课时操作写的代码)</p></blockquote>`,87),r=[s];function p(d,n,i,c,h,u){return e(),a("div",null,r)}const b=t(l,[["render",p]]);export{E as __pageData,b as default};
